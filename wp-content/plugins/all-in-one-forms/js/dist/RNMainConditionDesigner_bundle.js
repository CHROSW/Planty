rndefine("#RNMainConditionDesigner",["lit","#RNMainCore/LitElementBase","lit/decorators","#RNMainFormBuilderCore/ConditionBase.Options","lit/directives/repeat.js","#RNMainLit/Lit","#RNMainFormBuilderCore/FieldBase.Options","lit-html/directives/live.js","#RNMainParser/FormulaBuilder.Model","#RNMainFormBuilderCore/FormBuilder.Options","#RNMainCore/EventManager","#RNMainCore/Sanitizer","#RNMainCore/WpAjaxPost"],(function(i,n,t,e,o,s,a,r,p,l,d,u,m){"use strict";var C;t.customElement("rn-condition-builder")(class extends n.LitElementBase{static get properties(){return{}}render(){return i.html` <div style="margin-top: 15px;"> ${o.repeat(this.Condition.ConditionGroups,(i=>i.Id),((n,t)=>i.html` <div style="margin-bottom: 10px"> <rn-condition-group .model="${this.model}" @formulachanged="${()=>this.RecalculateElementsUsed()}" @fieldchanged=${()=>this.RecalculateElementsUsed()} @removegroup=${i=>this.RemoveGroup(i.detail)} .ConditionBuilder=${this} .ConditionGroup=${n} .AdditionalConditions=${this.AdditionalConditions}></rn-condition-group> ${t<this.Condition.ConditionGroups.length-1?i.html`<span style="font-weight: bold;">${RNTranslate("or")}</span>`:""} </div> `))} <div style="margin-top: 10px;"> <div style="margin-top: 10px;"> <button style="margin-left: 2px" @click=${i=>{i.preventDefault(),this.CreateGroup()}} class='rnbtn rnbtn-primary'>${RNTranslate("Add new group")}</button> </div> </div> </div> `}RemoveGroup(i){let n=this.Condition.ConditionGroups.indexOf(i);n<0||(this.Condition.ConditionGroups.splice(n,1),0==this.Condition.ConditionGroups.length&&this.FireEvent("AllGroupsRemoved",!0),this.RecalculateElementsUsed(),this.forceUpdate())}CreateGroup(){this.Condition.ConditionGroups.push((new e.ConditionGroupOptions).Merge({ConditionLines:[{}]})),this.forceUpdate()}RecalculateElementsUsed(){this.Condition.ElementsUsed=[];for(let i of this.Condition.ConditionGroups)for(let n of i.ConditionLines)if(n.Type==e.ConditionLineTypeEnum.Field&&this.Condition.ElementsUsed.push((new e.ElementUsedOptions).Merge({Type:e.ElementUsedTypeEnum.Field,Id:n.FieldId})),null!=n.Formula)for(let i of n.Formula.Fields)this.Condition.ElementsUsed.push((new e.ElementUsedOptions).Merge({Type:e.ElementUsedTypeEnum.Field,Id:i}))}});let h=t.customElement("rn-condition-group")(C=class extends n.LitElementBase{constructor(...i){super(...i),this.AdditionalConditions=[]}static get properties(){return{}}render(){return i.html` <table class='rnConditionGroup' style="margin-bottom: 10px;table-layout: fixed;width: 100%;"> <tbody> ${o.repeat(this.ConditionGroup.ConditionLines,(i=>i.Id),((n,t)=>i.html` <rn-condition-line .model=${this.model} .AdditionalConditions=${this.AdditionalConditions} @removeline=${i=>this.RemoveLine(i.detail)} @addline=${i=>this.AddLineBellow(i.detail)} .ConditionGroup=${this} .ConditionLineOptions=${n}></rn-condition-line> `))} </tbody> </table> `}RemoveLine(i){let n=this.ConditionGroup.ConditionLines.indexOf(i);n<0||(this.ConditionGroup.ConditionLines.splice(n,1),0!=this.ConditionGroup.ConditionLines.length?(this.FireEvent("fieldchanged"),this.forceUpdate()):this.FireEvent("removegroup",this.ConditionGroup))}AddLineBellow(i){let n=this.ConditionGroup.ConditionLines.indexOf(i);n<0||(this.ConditionGroup.ConditionLines.splice(n+1,0,(new e.ConditionLineOptions).Merge()),this.FireEvent("fieldchanged"),this.forceUpdate())}})||C;var c={};!function(i){Object.defineProperty(i,"__esModule",{value:!0});var n="times",t=[],e="f00d",o="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z";i.definition={prefix:"fas",iconName:n,icon:[352,512,t,e,o]},i.faTimes=i.definition,i.prefix="fas",i.iconName=n,i.width=352,i.height=512,i.ligatures=t,i.unicode=e,i.svgPathData=o}(c);var y,T={};!function(i){Object.defineProperty(i,"__esModule",{value:!0});var n="calculator",t=[],e="f1ec",o="M400 0H48C22.4 0 0 22.4 0 48v416c0 25.6 22.4 48 48 48h352c25.6 0 48-22.4 48-48V48c0-25.6-22.4-48-48-48zM128 435.2c0 6.4-6.4 12.8-12.8 12.8H76.8c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm0-128c0 6.4-6.4 12.8-12.8 12.8H76.8c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm128 128c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm0-128c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8v-38.4c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v38.4zm128 128c0 6.4-6.4 12.8-12.8 12.8h-38.4c-6.4 0-12.8-6.4-12.8-12.8V268.8c0-6.4 6.4-12.8 12.8-12.8h38.4c6.4 0 12.8 6.4 12.8 12.8v166.4zm0-256c0 6.4-6.4 12.8-12.8 12.8H76.8c-6.4 0-12.8-6.4-12.8-12.8V76.8C64 70.4 70.4 64 76.8 64h294.4c6.4 0 12.8 6.4 12.8 12.8v102.4z";i.definition={prefix:"fas",iconName:n,icon:[448,512,t,e,o]},i.faCalculator=i.definition,i.prefix="fas",i.iconName=n,i.width=448,i.height=512,i.ligatures=t,i.unicode=e,i.svgPathData=o}(T);class E{Initialize(i,n){return this.Condition=i,this.Model=n,this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.None&&this.InitializeValues(),this}GetFormulaPlaceHolder(){return null==this.Condition.ConditionGroup.ConditionBuilder.model?null:this.Condition.ConditionGroup.ConditionBuilder.model.SupportFormulas?i.html` <rn-fontawesome @click="${()=>this.OpenFormula()}" class="formulaIcon" .icon="${T.faCalculator}" style="z-index: 1;font-size: 18px;cursor: pointer;color:#dfdfdf;right: 3px;top:50%;position:absolute;transform: translateY(-50%)" ></rn-fontawesome> `:null}GetPreferredReturnType(){return l.PreferredReturnTypeEnum.String}GetFormulaOrValueInput(){return null!=this.Condition&&null!=this.Condition.ConditionLineOptions.Formula?i.html` <div style="position: relative;width: 100%;"> <input readonly type="text" style="width: 100%;height: 30px;padding: 0 5px;cursor: pointer;" .value="${d.EventManager.Publish("GetFriendlyFormula",{Form:this.Model.GetFormulaFormBuilder(),Code:this.Condition.ConditionLineOptions.Formula.Code})}" @click="${()=>this.OpenFormula()}"/> <rn-fontawesome title="Remove Formula" .icon=${c.faTimes} class='formulaRemove' style="font-size: 18px;margin-right: 5px;cursor: pointer;position: absolute;top:50%;right: 1px;transform: translateY(-50%)" @click=${()=>this.RemoveFormula()}></rn-fontawesome> </div>`:this.GetValueInput()}async OpenFormula(){null==this.Condition.ConditionLineOptions.Formula&&(this.Condition.ConditionLineOptions.Formula=(new a.FormulaOptions).Merge());let i=this.Condition.ConditionLineOptions.Formula;new p.FormulaBuilderModel(this.Model.GetFormulaFormBuilder(),d.EventManager.Publish("GetAutocompleteDictionary",this.Model.Form.RootFormBuilder)).RenderDialog(null,null==i?void 0:i.Code,(n=>{i.Code=n.Code,i.Compiled=n.Compiled,i.Fields=n.FieldsUsed,i.Dependencies=n.Dependencies,i.PreferredReturnType=this.GetPreferredReturnType(),this.Condition.forceUpdate(),this.Condition.FireEvent("formulachanged",null,!0)}))}RemoveFormula(){null!=this.Condition&&(this.Condition.ConditionLineOptions.Formula=null,this.Condition.forceUpdate(),this.Condition.FireEvent("formulachanged",null,!0))}}class $ extends E{GetComparator(){return i.html`<select style="width:100%;height: auto;padding: 0;" disabled/>`}GetValueInput(){return i.html`<input value="" style="width: 100%;height: 30px;" type='text' disabled/>`}InitializeValues(){}}class L extends E{GetComparator(){return i.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${i=>this.ComparisonChanged(i.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.Contains}" value=${e.ComparisonTypeEnum.Contains}>${RNTranslate("Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.NotContains}" value=${e.ComparisonTypeEnum.NotContains}>${RNTranslate("Not Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsEmpty}" value=${e.ComparisonTypeEnum.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNotEmpty}" value=${e.ComparisonTypeEnum.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.Contains}GetValueInput(){if(this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsEmpty||this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNotEmpty)return null;let n=this.GetAvailableOptions(),t=n.filter((i=>this.Condition.ConditionLineOptions.Value.indexOf(i.value)>=0)).map((i=>i.value)),o=this.Condition.ConditionLineOptions.Comparison,a=o==e.ComparisonTypeEnum.IsEmpty||o==e.ComparisonTypeEnum.IsNotEmpty;return i.html` <div style="width: 100%"> <rn-inputs-select style="min-height: 30px;margin-bottom: 0" multiple .value="${t}" @change="${i=>this.OnChange(i.detail)}" .propertyName="${"Type"}" .options="${n.map((i=>({Label:i.label,Value:i.value})))}"></rn-inputs-select> ${s.rnIf(!a&&this.GetFormulaPlaceHolder())} </div> `}ComparisonChanged(i){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum[i],this.Condition.forceUpdate()}GetAvailableOptions(){let i=[];if(this.Condition.ConditionLineOptions.Type==e.ConditionLineTypeEnum.Field){let n=this.Condition.ConditionGroup.ConditionBuilder.FormBuilder.GetFields().find((i=>i.Options.Id.toString()==this.Condition.ConditionLineOptions.FieldId));if(null==n)return i;for(let t of n.Options.Options)i.push({label:t.Label,value:t.Id})}return i}OnChange(i){this.Condition.ConditionLineOptions.Value=i,this.Condition.forceUpdate()}}class g extends E{GetComparator(){return i.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${i=>this.ComparisonChanged(i.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.Equal}" .value=${e.ComparisonTypeEnum.Equal}>${RNTranslate("Equal To")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.NotEqual}" .value=${e.ComparisonTypeEnum.NotEqual}>${RNTranslate("Not equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.GreaterThan}" .value=${e.ComparisonTypeEnum.GreaterThan}>${RNTranslate("Greater than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.GreaterOrEqualThan}" .value=${e.ComparisonTypeEnum.GreaterOrEqualThan}>${RNTranslate("Greater or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.LessThan}" .value=${e.ComparisonTypeEnum.LessThan}>${RNTranslate("Less than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.LessOrEqualThan}" .value=${e.ComparisonTypeEnum.LessOrEqualThan}>${RNTranslate("Less or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsEmpty}" .value=${e.ComparisonTypeEnum.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNotEmpty}" .value=${e.ComparisonTypeEnum.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.Equal,this.Condition.ConditionLineOptions.Value=u.Sanitizer.SanitizeNumber(this.Condition.ConditionLineOptions.Value,0)}GetValueInput(){if(this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsEmpty||this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNotEmpty)return null;let n=this.Condition.ConditionLineOptions.Comparison,t=n==e.ComparisonTypeEnum.IsEmpty||n==e.ComparisonTypeEnum.IsNotEmpty;return i.html` <div style="width: 100%"> ${s.rnIf(!t&&this.GetFormulaPlaceHolder())} <rn-inputs-datepicker style="height: 30px;min-height: 30px;margin-bottom: 0;" .value="${this.Condition.ConditionLineOptions.Value}" @change="${i=>this.Condition.ConditionLineOptions.Value=i.detail}"></rn-inputs-datepicker> </div> `}GetPreferredReturnType(){return l.PreferredReturnTypeEnum.Number}ComparisonChanged(i){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum[i],this.Condition.forceUpdate()}ValueChanged(i){}GetContainer(i){document.getElementsByTagName("body")}}class O extends E{GetComparator(){return i.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${i=>this.ComparisonChanged(i.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.Equal}" value=${e.ComparisonTypeEnum.Equal}>${RNTranslate("Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.NotEqual}" value=${e.ComparisonTypeEnum.NotEqual}>${RNTranslate("Not Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.GreaterThan}" value=${e.ComparisonTypeEnum.GreaterThan}>${RNTranslate("Greater than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.GreaterOrEqualThan}" value=${e.ComparisonTypeEnum.GreaterOrEqualThan}>${RNTranslate("Greater or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.LessThan}" value=${e.ComparisonTypeEnum.LessThan}>${RNTranslate("Less than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.LessOrEqualThan}" value=${e.ComparisonTypeEnum.LessOrEqualThan}>${RNTranslate("Less or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsEmpty}" value=${e.ComparisonTypeEnum.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNotEmpty}" value=${e.ComparisonTypeEnum.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.Equal,this.Condition.ConditionLineOptions.Value=u.Sanitizer.SanitizeNumber(this.Condition.ConditionLineOptions.Value,"")}GetValueInput(){let n=this.Condition.ConditionLineOptions.Comparison;return i.html`<input type="number" value=${r.live(this.Condition.ConditionLineOptions.Value)} @change=${i=>this.ValueChanged(i.target.value)} style="min-width: 100%;max-width: 200px;height: 30px;width: 100%;" type='text' ?disabled=${n==e.ComparisonTypeEnum.IsEmpty||n==e.ComparisonTypeEnum.IsNotEmpty}/>`}ComparisonChanged(i){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum[i],this.Condition.forceUpdate()}ValueChanged(i){this.Condition.ConditionLineOptions.Value=i,this.Condition.forceUpdate()}}class I extends E{GetComparator(){return i.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${i=>this.ComparisonChanged(i.target.value.toString())} style="height: auto;padding: 0;margin-left: 5px;width:100%;"> <option value=${e.ComparisonTypeEnum.IsChecked}>${RNTranslate("Is Checked")}</option> <option value=${e.ComparisonTypeEnum.IsNotChecked}>${RNTranslate("Is Not Checked")}</option> </select> `}GetValueInput(){return null}ComparisonChanged(i){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum[i],this.Condition.forceUpdate()}ValueChanged(i){this.Condition.ConditionLineOptions.Value=i,this.Condition.forceUpdate()}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.IsChecked}}class f extends E{GetComparator(){return i.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${i=>this.ComparisonChanged(i.target.value.toString())} style="height: auto;padding: 0;margin-left: 5px;width: 100%"> <option value=${e.ComparisonTypeEnum.WasClicked}>${RNTranslate("Was Clicked")}</option> </select>`}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.WasClicked}GetValueInput(){return null}ComparisonChanged(i){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum[i],this.Condition.forceUpdate()}ValueChanged(i){this.Condition.ConditionLineOptions.Value=i,this.Condition.forceUpdate()}}class v{constructor(){this._loadingUsers=null,this._loadingUsersQueue=[],this._cachedUsers=new Map}static GetInstance(){return null==v._Instance&&(v._Instance=new v),v._Instance}async GetUsersById(i){return this.MaybeLoadUsers(i)}GetUserList(){return Array.from(this._cachedUsers.values())}async MaybeLoadUsers(i){let n=[];for(let t of i)this._cachedUsers.has(t)||n.push(t);if(0==n.length)return!0;let t=await m.WpAjaxPost.Post("load_users_by_id",{Ids:n},"",null,{Prefix:rnConditionDesignerVar._prefix,Nonce:rnConditionDesignerVar._nonce});if(null==t)return!1;for(let i of t)this.AddUser(i.Value,i.Label);return i.forEach((i=>{this._cachedUsers.has(i)||this.AddUser(i,"Unknown")})),!0}HasAllUsers(i){for(let n of i)if(!this._cachedUsers.has(n))return!1;return!0}AddUser(i,n){this._cachedUsers.has(i)||this._cachedUsers.set(i,{Value:i,Label:n})}}class F extends E{constructor(){super(),this.LoadUsers=this.LoadUsers.bind(this)}GetComparator(){return i.html` <select .value="${this.Condition.ConditionLineOptions.Comparison}" @change=${i=>this.ComparisonChanged(i.target.value.toString())} style="height: 28px;padding: 0;width: 100%;"> <!-- <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.ViewingPage}" .value="${e.ComparisonTypeEnum.ViewingPage}">${RNTranslate("User viewing the page")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.Is}" .value="${e.ComparisonTypeEnum.Is}">${RNTranslate("Is")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNot}" .value="${e.ComparisonTypeEnum.IsNot}">${RNTranslate("Is Not")}</option>--> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsPartOfRole}" .value="${e.ComparisonTypeEnum.IsPartOfRole}">${RNTranslate("Is part of role")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNotPartOfRole}" .value="${e.ComparisonTypeEnum.IsNotPartOfRole}">${RNTranslate("Is not part of role")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsGuest}" .value="${e.ComparisonTypeEnum.IsGuest}">${RNTranslate("Is guest")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNotGuest}" .value="${e.ComparisonTypeEnum.IsNotGuest}">${RNTranslate("Is not guest")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.Is,this.Condition.ConditionLineOptions.Value=[]}GetValueInput(){return[e.ComparisonTypeEnum.ViewingPage,e.ComparisonTypeEnum.IsGuest,e.ComparisonTypeEnum.IsNotGuest].indexOf(this.Condition.ConditionLineOptions.Comparison)>=0?null:i.html` <rn-inputs-select style="min-height: 30px" multiple .value="${this.Condition.ConditionLineOptions.Value}" @change="${i=>this.OnChange(i.detail)}" .propertyName="${"Type"}" .options="${rnConditionDesignerVar.Roles.map((i=>({Label:i.Label,Value:i.Id})))}"></rn-inputs-select> `}async LoadUsers(i,n){let t=await m.WpAjaxPost.Post("list_users",{query:i},"",null,{Nonce:rnConditionDesignerVar._nonce,Prefix:rnConditionDesignerVar._prefix});if(null!=t)for(let i of t)v.GetInstance().AddUser(i.Value,i.Label);n(t)}ComparisonChanged(i){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum[i],this.Condition.ConditionLineOptions.Value=[],this.Condition.forceUpdate()}ValueChanged(i){this.Condition.ConditionLineOptions.Value=i,this.Condition.forceUpdate()}GetAvailableOptions(){let i=[];for(let n of rednaoFormDesigner.Roles)i.push({label:n.Label,value:n.Id});return i}OnChange(i){this.Condition.ConditionLineOptions.Value=i,this.Condition.forceUpdate()}GetUserControl(){let n=u.Sanitizer.SanitizeStringArray(this.Condition.ConditionLineOptions.Value);return v.GetInstance().HasAllUsers(n)?i.html` <rn-inputs-select .load="${this.LoadUsers}" style="min-height: 30px" multiple .value="${this.Condition.ConditionLineOptions.Value}" @change="${i=>this.OnChange(i.detail)}" .options="${v.GetInstance().GetUserList()}" .propertyName="${"Type"}"></rn-inputs-select> `:(v.GetInstance().GetUsersById(n).then((i=>this.Condition.forceUpdate())),i.html`<span>Loading users</span>`)}}class G extends E{GetComparator(){return i.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${i=>this.ComparisonChanged(i.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.Equal}" .value=${e.ComparisonTypeEnum.Equal}>${RNTranslate("Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.NotEqual}" .value=${e.ComparisonTypeEnum.NotEqual}>${RNTranslate("Not Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsEmpty}" .value=${e.ComparisonTypeEnum.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.IsNotEmpty}" .value=${e.ComparisonTypeEnum.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.Contains}" .value=${e.ComparisonTypeEnum.Contains}>${RNTranslate("Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==e.ComparisonTypeEnum.NotContains}" .value=${e.ComparisonTypeEnum.NotContains}>${RNTranslate("Not Contains")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.Equal}GetValueInput(){let n=this.Condition.ConditionLineOptions.Comparison,t=n==e.ComparisonTypeEnum.IsEmpty||n==e.ComparisonTypeEnum.IsNotEmpty;return i.html` <div style="width: 100%"> ${s.rnIf(!t&&this.GetFormulaPlaceHolder())} <input value=${r.live(this.Condition.ConditionLineOptions.Value)} @change=${i=>this.ValueChanged(i.target.value)} style="min-width: 100%;max-width: 200px;height: 30px;width: 100%;padding-right: 20px;" type='text' ?disabled=${t}/> </div> `}ComparisonChanged(i){this.Condition.ConditionLineOptions.Comparison=e.ComparisonTypeEnum[i],this.Condition.forceUpdate()}ValueChanged(i){this.Condition.ConditionLineOptions.Value=i,this.Condition.forceUpdate()}}let N=t.customElement("rn-condition-line")(y=class extends n.LitElementBase{constructor(...i){super(...i),this.EntryGroup=[{Id:"_sequence",Label:"Entry Number",Type:e.SubTypeEnum.Numeric},{Id:"_creation_date",Label:"Creation Date",Type:e.SubTypeEnum.Date},{Id:"_submitted_by",Label:"Submitted By",Type:e.SubTypeEnum.Role}]}static get properties(){return{}}render(){var n,t;let o=this.GetFields(this.ConditionGroup.ConditionBuilder.FormBuilder),a=class{static GetComparator(i,n){switch(i.ConditionLineOptions.Type){case e.ConditionLineTypeEnum.None:return new $;case e.ConditionLineTypeEnum.Entry:case e.ConditionLineTypeEnum.Field:case e.ConditionLineTypeEnum.User:return i.ConditionLineOptions.SubType==e.SubTypeEnum.MultipleValues?(new L).Initialize(i,n):i.ConditionLineOptions.SubType==e.SubTypeEnum.Date?(new g).Initialize(i,n):i.ConditionLineOptions.SubType==e.SubTypeEnum.Numeric?(new O).Initialize(i,n):i.ConditionLineOptions.SubType==e.SubTypeEnum.Checkbox?(new I).Initialize(i,n):i.ConditionLineOptions.SubType==e.SubTypeEnum.Button?(new f).Initialize(i,n):(i.ConditionLineOptions.SubType,e.SubTypeEnum.Status,i.ConditionLineOptions.SubType==e.SubTypeEnum.Role?(new F).Initialize(i,n):(new G).Initialize(i,n));case e.ConditionLineTypeEnum.Variation:return(new L).Initialize(i,n)}return new $}}.GetComparator(this,this.model),p=a.GetValueInput();return i.html` <tr style="display: flex;align-items: flex-start;margin-bottom: 5px;"> <td style="width: 30%"> <select .value="${r.live(this.ConditionLineOptions.FieldId+(""==this.ConditionLineOptions.PathId?"":"_"+this.ConditionLineOptions.PathId))}" style="height: 28px;padding: 0;width: 100%" @change=${i=>this.FieldChanged(i.target[i.target.selectedIndex].getAttribute("data-type").toString(),i.target[i.target.selectedIndex].getAttribute("data-field-id").toString(),i.target[i.target.selectedIndex].getAttribute("data-path-id").toString(),i.target[i.target.selectedIndex])}> <option data-linetype=${e.ConditionLineTypeEnum.None.toString()} id=''>${RNTranslate("Select a field")}</option> ${s.rnIf((null===(n=this.ConditionGroup.ConditionBuilder)||void 0===n||null===(t=n.model)||void 0===t?void 0:t.GetIncludeUserInformationFields())&&i.html` <optgroup label="User Information"> <option data-type="${e.ConditionLineTypeEnum.User}" ?selected="${"_role"==this.ConditionLineOptions.FieldId&&this.ConditionLineOptions.Type==e.ConditionLineTypeEnum.User}" .value="${"_role"}" data-path-id="" data-field-id="${"_role"}" data-subtype="${e.SubTypeEnum.Role}" >User</option> </optgroup> `)} <optgroup label="Entry"> ${this.EntryGroup.map((n=>i.html` <option data-type="${e.ConditionLineTypeEnum.Entry}" ?selected="${n.Id==this.ConditionLineOptions.FieldId&&this.ConditionLineOptions.Type==e.ConditionLineTypeEnum.Entry}" data-field-id="${n.Id}" data-path-id="" data-subtype="${n.Type}" .value="${n.Id}">${n.Label}</option> `))} </optgroup> <optgroup label=${RNTranslate("Fields")}> ${this.GetSelectOptions(o,0)} </optgroup> </select> </td> <td style="width:${null==p?"calc(70% - 80px)":"20%"}"> ${a.GetComparator()} </td> ${s.rnIf(null!=p&&i.html` <td style="width: calc(50% - 80px);position: relative"> ${a.GetFormulaOrValueInput()} </td> `)} <td style="width: 80px"> <button @click=${i=>{i.preventDefault(),this.FireEvent("addline",this.ConditionLineOptions)}} class='rnbtn rnbtn-light' style="margin-left: 5px;padding: 1px 5px;">${RNTranslate("AND")}</button> <span style="line-height: 25px;vertical-align: middle;cursor: pointer;" @click=${i=>{i.preventDefault(),this.FireEvent("removeline",this.ConditionLineOptions)}} class="rnline"><rn-fontawesome .icon=${c.faTimes} style="margin-left: 5px"/></span> </td> </tr> `}GetSelectOptions(n,t){let o=this.ConditionLineOptions.FieldId+(""==this.ConditionLineOptions.PathId?"":"_"+this.ConditionLineOptions.PathId);return(n=n.filter((i=>i.GetStoresInformation()&&i.UsedInConditions)).filter((i=>i.Options.Type!=a.FieldTypeEnum.None)).sort(((i,n)=>i.Options.Label.localeCompare(n.Options.Label)))).filter((i=>{var n;return i.Options.Id.toString()!=(null===(n=this.ConditionGroup.ConditionBuilder.FieldToHide)||void 0===n?void 0:n.Options.Id.toString())})).map((n=>i.html` <option data-type="${e.ConditionLineTypeEnum.Field}" ?selected="${n.Options.Id.toString()==o}" ?disabled="${this.ShouldIncludeSubFields(n)}" data-field-id="${n.Options.Id}" data-path-id="" .value="${n.Options.Id.toString()}">${this.GetSpaces(t)}${n.Options.Label+(""!=n.Options.Label.trim()?" ":"")+"(Id: "+n.Options.Id+")"}</option> ${s.rnIf(this.GetSubSections(n).length>0&&this.GetSubSections(n).map((s=>i.html` <option data-type="${e.ConditionLineTypeEnum.Field}" ?selected="${n.Options.Id+"_"+s.PathId==o}" data-field-id="${n.Options.Id}" data-path-id="${s.PathId}" .value="${n.Options.Id+"_"+s.PathId}">${this.GetSpaces(t+1)}${s.Label}</option> `)))} ${s.rnIf(this.ShouldIncludeSubFields(n)&&this.GetSelectOptions(this.GetFields(n),t+1))} `))}ShouldIncludeSubFields(i){var n;return!!i.IsFieldContainer&&(i.Options.Type!=a.FieldTypeEnum.Repeater||!1!==(null===(n=this.model)||void 0===n?void 0:n.GetIncludeRepeaterFields()))}GetSubSections(i){var n;return i.Options.Type==a.FieldTypeEnum.Repeater&&!1===(null===(n=this.model)||void 0===n?void 0:n.GetIncludeRepeaterFields())?[]:i.GetSubSections()}GetSpaces(n){let t=[];for(let e=0;e<n;e++)t.push(i.html`&nbsp;&nbsp;&nbsp;`);return t}FieldChanged(i,n,t,o){let s=e.SubTypeEnum.Standard;if(this.ConditionLineOptions.Value="",this.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.None,i==e.ConditionLineTypeEnum.Field){var r;let i=null===(r=this.ConditionGroup.ConditionBuilder.FormBuilder.GetFieldById(n,!0))||void 0===r?void 0:r.Options;if(null==i)return;null!=i&&[a.FieldTypeEnum.Checkbox,a.FieldTypeEnum.Radio,a.FieldTypeEnum.DropDown,a.FieldTypeEnum.ButtonSelection].indexOf(i.Type)>=0&&(s=e.SubTypeEnum.MultipleValues,this.ConditionLineOptions.Value=[]),null!=i&&[a.FieldTypeEnum.GoogleMaps].indexOf(i.Type)>=0&&(s="GoogleMaps",this.ConditionLineOptions.Value=[]),null!=i&&[a.FieldTypeEnum.Slider].indexOf(i.Type)>=0&&(s=e.SubTypeEnum.Numeric,this.ConditionLineOptions.Value=[]),null!=i&&[a.FieldTypeEnum.Datepicker,a.FieldTypeEnum.DateRange].indexOf(i.Type)>=0&&(s=e.SubTypeEnum.Date,this.ConditionLineOptions.Value=[]),null!=i&&[a.FieldTypeEnum.List].indexOf(i.Type)>=0&&(s=e.SubTypeEnum.List,this.ConditionLineOptions.Value=""),null!=i&&[a.FieldTypeEnum.Switch].indexOf(i.Type)>=0&&(s=e.SubTypeEnum.Checkbox,this.ConditionLineOptions.Value=[]),null!=i&&[a.FieldTypeEnum.ActionButton].indexOf(i.Type)>=0&&(s=e.SubTypeEnum.Button,this.ConditionLineOptions.Value=[])}i!=e.ConditionLineTypeEnum.Entry&&i!=e.ConditionLineTypeEnum.User||(s=o.getAttribute("data-subtype")),this.ConditionLineOptions.Formula=null,this.ConditionLineOptions.FieldId=n,this.ConditionLineOptions.PathId=t,this.ConditionLineOptions.Comparison=e.ComparisonTypeEnum.None,this.ConditionLineOptions.Type=i,this.ConditionLineOptions.SubType=s,this.FireEvent("fieldchanged",null,!0),this.forceUpdate()}GetFields(i){var n,t;i.IsFieldContainer&&i.Options.Type==a.FieldTypeEnum.Repeater&&(i=null===(n=i.Rows[0])||void 0===n||null===(t=n.Columns[0])||void 0===t?void 0:t.Field);return null==i?[]:i.GetFields(!1,!1,!1).filter((i=>i.GetStoresInformation()&&[a.FieldTypeEnum.Signature,a.FieldTypeEnum.TermOfService,a.FieldTypeEnum.TextualImage,a.FieldTypeEnum.FileUpload].indexOf(i.Options.Type)<0))}})||y;exports.ConditionBuilderModel=class{constructor(){this._roles=null,this._userNonce="",this._includeRepeaterFields=!0,this._includeUserInformationFields=!1,this._supportFormulas=!0}render(n,t,e=null,o=null){return this.Form=n,i.html` <rn-condition-builder @AllGroupsRemoved=${i=>null!=e&&e()} .model="${this}" .FormBuilder="${n}" .Condition="${t}" .FieldToHide=${o} ></rn-condition-builder> `}get SupportFormulas(){return this._supportFormulas}SetSupportFormulas(i){return this._supportFormulas=i,this}GetFormulaFormBuilder(){return null!=this.FormulaFormBuilder?this.FormulaFormBuilder:this.Form}GetIncludeRepeaterFields(){return this._includeRepeaterFields}SetIncludeRepeaterFields(i){this._includeRepeaterFields=i}SetIncludeUserInformationFields(i){this._includeUserInformationFields=i}GetIncludeUserInformationFields(){return this._includeUserInformationFields}},exports.ConditionGroup=h,exports.ConditionLine=N,exports.ConditionGroupBase=class{GetOptionById(i){return this.GetOptions().find((n=>n.Id==i))}},exports.UserCache=v}));
